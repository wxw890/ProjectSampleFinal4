<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd"><!-- DOCTip을 가져옴,실제 DB를 설정하기 위해서 따옴 -->
  <mapper namespace="mybatis.bookMapper"><!--네임스페이스는 보통 경로를 적어주면 된다. 또한 dao로 DB를 했던것을 이제는 xml로 DB를 하겠다는뜻 -->
 
	<insert id="bookinput" parameterType="BookDto"> 
  	insert into book(book_title,book_label,book_author,book_genre,book_imdate,book_isbn,book_chunggu,book_res,book_img,book_status,book_loc) 
  		 values(#{book_title},#{book_label},#{book_author},#{book_genre},now(),#{book_isbn},#{book_chunggu},'0',#{book_img},'0',#{book_loc})
  	</insert>
  	<select id="booklist" resultType="BookDto">
  		select * from book
  	</select>
  	<select id="findBynum" parameterType="int" resultType="BookDto"><!--객체일경우 객체타입지정, 정수일경우 정수타입지정 -->
  		select * from book where book_num=#{book_num}
  	</select>
  	<update id="updatebook" parameterType="BookDto" >
  		update book set book_title=#{book_title}, book_loc=#{book_loc} where book_num=#{book_num}
  	</update>
		<select id="todaybooklist" resultType="BookDto"><!--따로 +를 해줄필요가 없으며 자유롭게 select할 sql문을 사용하면 된다. resultType(보내는 역할)는 밑에 sql문이 DB를 통해 결과를 가져오면 Dto에 다시 값을 보내야하기 때문에 사용한다.(즉 return타입) -->
  		select * from book where book_imdate=CURRENT_DATE()
  		</select>
  		
  	<delete id="deletebook" parameterType="int"  >
  		delete from book where book_num=#{book_num}
  	</delete>
 
  	<!-- 대여정보 -->
  	<select id="samelist" resultType="BookDto">
  select * from book where book_title=#{book_title};
  	</select>
  
  	<select id="condition1"  parameterType="ConditionDto" resultType="BookDto">
  		select * from book where ${item} like concat ('%',#{value},'%') 
  		 group by book_title
  		  having count(*) > 0
  	</select>
  	<select id="condition2"  parameterType="ConditionDto" resultType="BookDto"><!--따로 +를 해줄필요가 없으며 자유롭게 select할 sql문을 사용하면 된다. resultType(보내는 역할)는 밑에 sql문이 DB를 통해 결과를 가져오면 Dto에 다시 값을 보내야하기 때문에 사용한다.(즉 return타입) -->
  		select * from book where ${item} like concat ('%',#{value},'%') 
  		${op} ${seconditem} like concat ('%',#{secondvalue},'%') 
  		 group by book_title
  		  having count(*) > 0
  	</select>
  	<select id="condition3"  parameterType="ConditionDto" resultType="BookDto"><!--따로 +를 해줄필요가 없으며 자유롭게 select할 sql문을 사용하면 된다. resultType(보내는 역할)는 밑에 sql문이 DB를 통해 결과를 가져오면 Dto에 다시 값을 보내야하기 때문에 사용한다.(즉 return타입) -->
  		select * from book where ${item} like concat ('%',#{value},'%') 
  		${op} ${seconditem} like concat ('%',#{secondvalue},'%') 
  		${secondop} ${thirditem} like concat ('%',#{thirdvalue},'%')
  		 group by book_title
  		  having count(*) > 0
  	</select>
  	  	
  	<update id="addrental" parameterType="Member">
  		update member set rentallimit=rentallimit+1 where member_email=#{member_email};
  	</update> 
  	
  	<update id="rentalbook" parameterType="BookDto">
  		update book set book_status=1 where book_num=#{book_num}
  	</update>
  	<insert id="rentalinfo" parameterType="RentalInfoDto" >
  		insert into rentalinfo(rental_date,renbtal_returndate,rental_extension,rental_return,book_num,member_email) 
  		value(now(), NOW() - INTERVAL 3 DAY ,0,0,#{book_num},#{member_email}) 
  	</insert>
  
  	
 	<select id="mylist" resultType="BookandRentalDto" >
 		select book.book_num, book.book_title,
		rentalinfo.rental_date, rentalinfo.renbtal_returndate,
		GREATEST(day(now())-DAY(rentalinfo.renbtal_returndate), 0) overdate,
        GREATEST(500*(day(now())-DAY(rentalinfo.renbtal_returndate)), 0) return_sal,
 		member.rentallimit
        from rentalinfo left join book   
 		on rentalinfo.book_num = book.book_num 
        left join member on rentalinfo.member_email = member.member_email
        where 
 		member.member_email=#{member_email} and book.book_status=1  
 		group by book_title
  		  having count(*) > 0;
 	</select>
 	
 	<delete id="bookreturn" parameterType="int" >
  		delete from rentalinfo where book_num=#{book_num}
  	</delete>
  	
  	<update id="bookreturnupdate" parameterType="BookDto">
  		update book set book_status=0 where book_num=#{book_num}
  	</update>
  	
  	<update id="subrental" parameterType="Member">
  		update member set rentallimit=rentallimit-1 where member_email=#{member_email};
  	</update>  
 
  	<update id="bookresupdate" parameterType="BookDto">
  		update book set book_res=1
  		 where book_num=#{book_num}  
  	</update>
  	
    <insert id="resinfo" parameterType="BookResDto" >
  		insert into bookres(book_num,member_email,res_date,res_end) 
  		value(#{book_num},#{member_email},now(),now() + INTERVAL 2 DAY) 
  	</insert>
  	
  	<update id="addres" parameterType="Member">
  		update member set reslimit=reslimit+1 where member_email=#{member_email};
  	</update>  
  
  	<select id="myreslist" resultType="BookandRentalDto" >
 	select * from bookres left join book   
 		on bookres.book_num = book.book_num 
        left join member on bookres.member_email = member.member_email
        where 
 		member.member_email=#{member_email} and book.book_res=1  
 		group by book_title
  		  having count(*) > 0;
 	</select>
 	
 	<delete id="bookrescancel" parameterType="int">
  		delete from bookres where book_num=#{book_num}
  	</delete>
 	 <update id="bookresend" parameterType="BookDto">
  		update book set book_res=0
  		 where book_num=#{book_num}
  	</update>
  	<update id="subres" parameterType="Member">
  		update member set reslimit=reslimit-1 where member_email=#{member_email};
  	</update>  
  
  	<update id="bookextension" parameterType="RentalInfoDto">
  		update rentalinfo set rental_extension=1, renbtal_returndate=now()+interval+3 day where book_num=#{book_num}
  	</update>
  	
  	<select id="rentallist" resultType="BookandRentalDto">
  		select * from rentalinfo 
		inner join book on
		rentalinfo.book_num = book.book_num 
 		GROUP BY book_title
		HAVING COUNT(*) > 0 order by renbtal_returndate asc
  	</select>
  	
  	<select id="resbooklist" resultType="BookandRentalDto">
  		select * from bookres
		inner join book on
		bookres.book_num = book.book_num
		where book_res=1 
 		GROUP BY book_title
		HAVING COUNT(*) > 0 order by res_end asc;
  	</select>
   	<update id="bookmanagerresend" parameterType="BookDto"><![CDATA[
  		update book set book_res=0
  		 where book_num in(select book_num from bookres where res_end < now());
  	]]>
  	</update>
   	<delete id="bookmanagerrescancel" ><![CDATA[
  	 delete from bookres where res_end < now();
  	]]>
  	</delete>
 	 
  	
  </mapper>